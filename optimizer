{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initial Equity Deployment Optimizer\n",
    "# Focus: Find optimal initial deployment size to maximize profit + recycled cash with positive IRRs\n",
    "# Includes: Blended revenue profile, front-loaded 100-site strategy, and variable equity draws in Years 1-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install numpy_financial\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy_financial as npf\n",
    "from IPython.display import display\n",
    "\n",
    "# Parameters\n",
    "equity_per_site = 1_450_968\n",
    "avg_cash_low = 580_000\n",
    "avg_cash_high = 2_030_000\n",
    "avg_cash_blended = (avg_cash_low + avg_cash_high) / 2  # 50:50 mix = $1,305,000/site\n",
    "target_sites = 1_000\n",
    "analysis_years = 10\n",
    "variable_draw_schedules = [\n",
    "    {'name': '50/50/0', 'draws': [50, 50, 0]},\n",
    "    {'name': '33/33/34', 'draws': [33, 33, 34]},\n",
    "    {'name': '20/40/40', 'draws': [20, 40, 40]}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_balanced_deployment(initial_sites, distribution_rate, avg_cash):\n",
    "    years = analysis_years\n",
    "    sites_equity = [initial_sites] + [0] * (years - 1)\n",
    "    sites_recycled = [0] * years\n",
    "    profit_distributed = [0] * years\n",
    "    retained_cash = [-initial_sites * equity_per_site] + [0] * (years - 1)\n",
    "    sites_start = [initial_sites] + [0] * (years - 1)\n",
    "    total_sites = initial_sites\n",
    "    \n",
    "    for yr in range(1, years):\n",
    "        sites_start[yr] = total_sites\n",
    "        retained_cash[yr] = retained_cash[yr-1] + sites_start[yr] * avg_cash\n",
    "        if retained_cash[yr] > 0:\n",
    "            payout = retained_cash[yr] * distribution_rate\n",
    "            profit_distributed[yr] = payout\n",
    "            retained_cash[yr] -= payout\n",
    "        if total_sites < target_sites and retained_cash[yr] > 0:\n",
    "            remaining_sites = target_sites - total_sites\n",
    "            max_affordable = int(retained_cash[yr] // equity_per_site)\n",
    "            new_sites = min(max_affordable, remaining_sites)\n",
    "            if new_sites > 0:\n",
    "                sites_recycled[yr] = new_sites\n",
    "                total_sites += new_sites\n",
    "                retained_cash[yr] -= new_sites * equity_per_site\n",
    "    \n",
    "    total_profit = sum(profit_distributed)\n",
    "    initial_equity = initial_sites * equity_per_site\n",
    "    roi = total_profit / initial_equity if initial_equity > 0 else 0\n",
    "    cash_flows = [-initial_equity] + profit_distributed\n",
    "    irr = npf.irr(cash_flows) if any(cf > 0 for cf in cash_flows[1:]) else None\n",
    "    cumulative_cash = np.cumsum([-initial_equity] + [sites_start[yr] * avg_cash for yr in range(1, years)])\n",
    "    break_even_year = next((i for i, cash in enumerate(cumulative_cash) if cash > 0), None)\n",
    "    sites_per_year = (total_sites - initial_sites) / (years - 1) if years > 1 else 0\n",
    "    \n",
    "    return {\n",
    "        'total_profit': total_profit,\n",
    "        'roi': roi,\n",
    "        'irr': irr if irr is not None else -1,\n",
    "        'final_sites': total_sites,\n",
    "        'break_even_year': break_even_year,\n",
    "        'sites_per_year': sites_per_year,\n",
    "        'sites_equity': sites_equity,\n",
    "        'sites_recycled': sites_recycled,\n",
    "        'profit_distributed': profit_distributed,\n",
    "        'retained_cash': retained_cash,\n",
    "        'sites_start': sites_start\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_variable_equity_draw(draw_schedule, distribution_rate, avg_cash):\n",
    "    years = analysis_years\n",
    "    sites_equity = draw_schedule + [0] * (years - len(draw_schedule))\n",
    "    sites_recycled = [0] * years\n",
    "    profit_distributed = [0] * years\n",
    "    retained_cash = [-draw_schedule[0] * equity_per_site] + [0] * (years - 1)\n",
    "    sites_start = [draw_schedule[0]] + [0] * (years - 1)\n",
    "    total_sites = draw_schedule[0]\n",
    "    \n",
    "    for yr in range(1, years):\n",
    "        sites_start[yr] = total_sites\n",
    "        retained_cash[yr] = retained_cash[yr-1] + sites_start[yr] * avg_cash\n",
    "        if yr < len(draw_schedule) and draw_schedule[yr] > 0:\n",
    "            total_sites += draw_schedule[yr]\n",
    "            retained_cash[yr] -= draw_schedule[yr] * equity_per_site\n",
    "        if retained_cash[yr] > 0:\n",
    "            payout = retained_cash[yr] * distribution_rate\n",
    "            profit_distributed[yr] = payout\n",
    "            retained_cash[yr] -= payout\n",
    "        if total_sites < target_sites and retained_cash[yr] > 0:\n",
    "            remaining_sites = target_sites - total_sites\n",
    "            max_affordable = int(retained_cash[yr] // equity_per_site)\n",
    "            new_sites = min(max_affordable, remaining_sites)\n",
    "            if new_sites > 0:\n",
    "                sites_recycled[yr] = new_sites\n",
    "                total_sites += new_sites\n",
    "                retained_cash[yr] -= new_sites * equity_per_site\n",
    "    \n",
    "    total_profit = sum(profit_distributed)\n",
    "    initial_equity = sum(draw_schedule) * equity_per_site\n",
    "    roi = total_profit / initial_equity if initial_equity > 0 else 0\n",
    "    cash_flows = [-initial_equity] + profit_distributed\n",
    "    irr = npf.irr(cash_flows) if any(cf > 0 for cf in cash_flows[1:]) else None\n",
    "    cumulative_cash = np.cumsum([-initial_equity] + [sites_start[yr] * avg_cash for yr in range(1, years)])\n",
    "    break_even_year = next((i for i, cash in enumerate(cumulative_cash) if cash > 0), None)\n",
    "    sites_per_year = (total_sites - sum(draw_schedule)) / (years - len(draw_schedule)) if years > len(draw_schedule) else 0\n",
    "    \n",
    "    return {\n",
    "        'total_profit': total_profit,\n",
    "        'roi': roi,\n",
    "        'irr': irr if irr is not None else -1,\n",
    "        'final_sites': total_sites,\n",
    "        'break_even_year': break_even_year,\n",
    "        'sites_per_year': sites_per_year,\n",
    "        'sites_equity': sites_equity,\n",
    "        'sites_recycled': sites_recycled,\n",
    "        'profit_distributed': profit_distributed,\n",
    "        'retained_cash': retained_cash,\n",
    "        'sites_start': sites_start\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def analyze_initial_equity_deployment(avg_cash, scenario_name, is_variable_draw=False, initial_sites_range=range(20, 41, 2)):\n",
    "    print(f\"\\n=== INITIAL EQUITY ANALYSIS - {scenario_name} ===\")\n",
    "    distribution_rates = [0.05, 0.1, 0.15, 0.2]\n",
    "    results = []\n",
    "    if is_variable_draw:\n",
    "        for schedule in variable_draw_schedules:\n",
    "            schedule_name = schedule['name']\n",
    "            draw_schedule = schedule['draws']\n",
    "            total_initial_sites = sum(draw_schedule)\n",
    "            for dist_rate in distribution_rates:\n",
    "                result = simulate_variable_equity_draw(draw_schedule, dist_rate, avg_cash)\n",
    "                if result['irr'] <= 0:\n",
    "                    continue\n",
    "                total_profit = result['total_profit']\n",
    "                recycled_sites_value = (result['final_sites'] - total_initial_sites) * equity_per_site\n",
    "                combined_value = total_profit + recycled_sites_value\n",
    "                initial_equity = total_initial_sites * equity_per_site\n",
    "                value_multiple = combined_value / initial_equity if initial_equity > 0 else 0\n",
    "                results.append({\n",
    "                    'Initial_Sites': total_initial_sites,\n",
    "                    'Initial_Equity': initial_equity,\n",
    "                    'Distribution_Rate': dist_rate,\n",
    "                    'Schedule': schedule_name,\n",
    "                    'Total_Profit': total_profit,\n",
    "                    'Recycled_Sites': result['final_sites'] - total_initial_sites,\n",
    "                    'Recycled_Value': recycled_sites_value,\n",
    "                    'Combined_Value': combined_value,\n",
    "                    'Value_Multiple': value_multiple,\n",
    "                    'IRR': result['irr'],\n",
    "                    'ROI': result['roi'],\n",
    "                    'Final_Sites': result['final_sites'],\n",
    "                    'Break_Even_Year': result['break_even_year'],\n",
    "                    'Sites_Per_Year': result['sites_per_year']\n",
    "                })\n",
    "    else:\n",
    "        for initial_sites in initial_sites_range:\n",
    "            for dist_rate in distribution_rates:\n",
    "                result = simulate_balanced_deployment(initial_sites, dist_rate, avg_cash)\n",
    "                if result['irr'] <= 0:\n",
    "                    continue\n",
    "                total_profit = result['total_profit']\n",
    "                recycled_sites_value = (result['final_sites'] - initial_sites) * equity_per_site\n",
    "                combined_value = total_profit + recycled_sites_value\n",
    "                initial_equity = initial_sites * equity_per_site\n",
    "                value_multiple = combined_value / initial_equity if initial_equity > 0 else 0\n",
    "                results.append({\n",
    "                    'Initial_Sites': initial_sites,\n",
    "                    'Initial_Equity': initial_equity,\n",
    "                    'Distribution_Rate': dist_rate,\n",
    "                    'Schedule': 'Baseline',\n",
    "                    'Total_Profit': total_profit,\n",
    "                    'Recycled_Sites': result['final_sites'] - initial_sites,\n",
    "                    'Recycled_Value': recycled_sites_value,\n",
    "                    'Combined_Value': combined_value,\n",
    "                    'Value_Multiple': value_multiple,\n",
    "                    'IRR': result['irr'],\n",
    "                    'ROI': result['roi'],\n",
    "                    'Final_Sites': result['final_sites'],\n",
    "                    'Break_Even_Year': result['break_even_year'],\n",
    "                    'Sites_Per_Year': result['sites_per_year']\n",
    "                })\n",
    "    df = pd.DataFrame(results)\n",
    "    if df.empty:\n",
    "        print(f\"⚠️ No scenarios with positive IRR found for {scenario_name}. Consider increasing initial sites or lowering distribution rates.\")\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"🎯 INITIAL EQUITY DEPLOYMENT OPTIMIZATION\")\n",
    "print(\"Focus: Positive IRR, maximize profit + recycled cash value, reach 1,000 sites\")\n",
    "low_results = analyze_initial_equity_deployment(avg_cash_low, \"LOW REVENUE\")\n",
    "high_results = analyze_initial_equity_deployment(avg_cash_high, \"HIGH REVENUE\")\n",
    "blended_results = analyze_initial_equity_deployment(avg_cash_blended, \"BLENDED REVENUE\")\n",
    "variable_draw_results = analyze_initial_equity_deployment(avg_cash_low, \"LOW REVENUE (VARIABLE EQUITY DRAW)\", is_variable_draw=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def format_currency(x):\n",
    "    return f\"${x:,.0f}\"\n",
    "def format_percentage(x):\n",
    "    return f\"{x:.1%}\"\n",
    "def format_multiple(x):\n",
    "    return f\"{x:.1f}x\"\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"TOP 10 INITIAL EQUITY RECOMMENDATIONS\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "display_cols = ['Initial_Sites', 'Initial_Equity', 'Distribution_Rate', 'Schedule', 'Total_Profit', \n",
    "                'Recycled_Sites', 'Combined_Value', 'Value_Multiple', 'IRR', 'Break_Even_Year']\n",
    "format_dict = {\n",
    "    'Initial_Equity': format_currency,\n",
    "    'Total_Profit': format_currency,\n",
    "    'Combined_Value': format_currency,\n",
    "    'Distribution_Rate': format_percentage,\n",
    "    'Value_Multiple': format_multiple,\n",
    "    'IRR': format_percentage\n",
    "}\n",
    "\n",
    "if not low_results.empty:\n",
    "    print(\"\\n🔻 LOW REVENUE SCENARIOS (Top 10 by Combined Value)\")\n",
    "    top_low = low_results.nlargest(10, 'Combined_Value')\n",
    "    display(top_low[display_cols].style.format(format_dict))\n",
    "if not high_results.empty:\n",
    "    print(\"\\n🔺 HIGH REVENUE SCENARIOS (Top 10 by Combined Value)\")\n",
    "    top_high = high_results.nlargest(10, 'Combined_Value')\n",
    "    display(top_high[display_cols].style.format(format_dict))\n",
    "if not blended_results.empty:\n",
    "    print(\"\\n🔸 BLENDED REVENUE SCENARIOS (Top 10 by Combined Value)\")\n",
    "    top_blended = blended_results.nlargest(10, 'Combined_Value')\n",
    "    display(top_blended[display_cols].style.format(format_dict))\n",
    "if not variable_draw_results.empty:\n",
    "    print(\"\\n🔹 LOW REVENUE VARIABLE EQUITY DRAW (Top 10 by Combined Value)\")\n",
    "    top_variable_draw = variable_draw_results.nlargest(10, 'Combined_Value')\n",
    "    display(top_variable_draw[display_cols].style.format(format_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"EFFICIENCY ANALYSIS - Best Value Multiple (Combined Value / Initial Equity)\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "if not low_results.empty:\n",
    "    print(\"\\n🔻 LOW REVENUE - Top 5 by Efficiency\")\n",
    "    efficient_low = low_results.nlargest(5, 'Value_Multiple')\n",
    "    display(efficient_low[display_cols].style.format(format_dict))\n",
    "if not high_results.empty:\n",
    "    print(\"\\n🔺 HIGH REVENUE - Top 5 by Efficiency\")\n",
    "    efficient_high = high_results.nlargest(5, 'Value_Multiple')\n",
    "    display(efficient_high[display_cols].style.format(format_dict))\n",
    "if not blended_results.empty:\n",
    "    print(\"\\n🔸 BLENDED REVENUE - Top 5 by Efficiency\")\n",
    "    efficient_blended = blended_results.nlargest(5, 'Value_Multiple')\n",
    "    display(efficient_blended[display_cols].style.format(format_dict))\n",
    "if not variable_draw_results.empty:\n",
    "    print(\"\\n🔹 LOW REVENUE VARIABLE EQUITY DRAW - Top 5 by Efficiency\")\n",
    "    efficient_variable_draw = variable_draw_results.nlargest(5, 'Value_Multiple')\n",
    "    display(efficient_variable_draw[display_cols].style.format(format_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"🎯 SPECIFIC RECOMMENDATIONS FOR YOUR GOALS\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "def find_sweet_spots(results, scenario_name):\n",
    "    print(f\"\\n{scenario_name} SCENARIO RECOMMENDATIONS:\")\n",
    "    conservative = results[(results['Initial_Sites'] >= 20) & (results['Initial_Sites'] <= 25)].nlargest(3, 'Value_Multiple') if 'Initial_Sites' in results.columns else pd.DataFrame()\n",
    "    if not conservative.empty:\n",
    "        best_conservative = conservative.iloc[0]\n",
    "        print(f\"\\n💼 CONSERVATIVE APPROACH:\")\n",
    "        print(f\"   • Initial Sites: {best_conservative['Initial_Sites']}\")\n",
    "        print(f\"   • Initial Equity: {format_currency(best_conservative['Initial_Equity'])}\")\n",
    "        print(f\"   • Distribution Rate: {format_percentage(best_conservative['Distribution_Rate'])}\")\n",
    "        print(f\"   • Schedule: {best_conservative['Schedule']}\")\n",
    "        print(f\"   • Expected Combined Value: {format_currency(best_conservative['Combined_Value'])}\")\n",
    "        print(f\"   • Value Multiple: {format_multiple(best_conservative['Value_Multiple'])}\")\n",
    "        print(f\"   • IRR: {format_percentage(best_conservative['IRR'])}\")\n",
    "        print(f\"   • Break-even: Year {best_conservative['Break_Even_Year'] or 'N/A'}\")\n",
    "    moderate = results[(results['Initial_Sites'] >= 26) & (results['Initial_Sites'] <= 30)].nlargest(3, 'Combined_Value') if 'Initial_Sites' in results.columns else pd.DataFrame()\n",
    "    if not moderate.empty:\n",
    "        best_moderate = moderate.iloc[0]\n",
    "        print(f\"\\n⚖️ MODERATE APPROACH:\")\n",
    "        print(f\"   • Initial Sites: {best_moderate['Initial_Sites']}\")\n",
    "        print(f\"   • Initial Equity: {format_currency(best_moderate['Initial_Equity'])}\")\n",
    "        print(f\"   • Distribution Rate: {format_percentage(best_moderate['Distribution_Rate'])}\")\n",
    "        print(f\"   • Schedule: {best_moderate['Schedule']}\")\n",
    "        print(f\"   • Expected Combined Value: {format_currency(best_moderate['Combined_Value'])}\")\n",
    "        print(f\"   • Value Multiple: {format_multiple(best_moderate['Value_Multiple'])}\")\n",
    "        print(f\"   • IRR: {format_percentage(best_moderate['IRR'])}\")\n",
    "        print(f\"   • Break-even: Year {best_moderate['Break_Even_Year'] or 'N/A'}\")\n",
    "    aggressive = results[(results['Initial_Sites'] >= 31) & (results['Initial_Sites'] <= 100)].nlargest(3, 'Combined_Value') if 'Initial_Sites' in results.columns else results.nlargest(3, 'Combined_Value')\n",
    "    if not aggressive.empty:\n",
    "        best_aggressive = aggressive.iloc[0]\n",
    "        print(f\"\\n🚀 AGGRESSIVE APPROACH:\")\n",
    "        print(f\"   • Initial Sites: {best_aggressive['Initial_Sites']}\")\n",
    "        print(f\"   • Initial Equity: {format_currency(best_aggressive['Initial_Equity'])}\")\n",
    "        print(f\"   • Distribution Rate: {format_percentage(best_aggressive['Distribution_Rate'])}\")\n",
    "        print(f\"   • Schedule: {best_aggressive['Schedule']}\")\n",
    "        print(f\"   • Expected Combined Value: {format_currency(best_aggressive['Combined_Value'])}\")\n",
    "        print(f\"   • Value Multiple: {format_multiple(best_aggressive['Value_Multiple'])}\")\n",
    "        print(f\"   • IRR: {format_percentage(best_aggressive['IRR'])}\")\n",
    "        print(f\"   • Break-even: Year {best_aggressive['Break_Even_Year'] or 'N/A'}\")\n",
    "\n",
    "if not low_results.empty:\n",
    "    find_sweet_spots(low_results, \"LOW REVENUE\")\n",
    "if not high_results.empty:\n",
    "    find_sweet_spots(high_results, \"HIGH REVENUE\")\n",
    "if not blended_results.empty:\n",
    "    find_sweet_spots(blended_results, \"BLENDED REVENUE\")\n",
    "if not variable_draw_results.empty:\n",
    "    find_sweet_spots(variable_draw_results, \"LOW REVENUE (VARIABLE EQUITY DRAW)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"📊 VISUALIZATION\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "def create_charts():\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n",
    "    axes = axes.flatten()\n",
    "    \n",
    "    # LOW REVENUE PLOT\n",
    "    if not low_results.empty:\n",
    "        for rate in low_results['Distribution_Rate'].unique():\n",
    "            subset = low_results[low_results['Distribution_Rate'] == rate]\n",
    "            axes[0].plot(subset['Initial_Equity']/1e6, subset['Combined_Value']/1e6, \n",
    "                        marker='o', label=f'{rate:.0%} Distribution', linewidth=2, markersize=6)\n",
    "    axes[0].set_xlabel('Initial Equity ($M)')\n",
    "    axes[0].set_ylabel('Combined Value: Profit + Recycled Assets ($M)')\n",
    "    axes[0].set_title('LOW Revenue Scenario')\n",
    "    axes[0].legend()\n",
    "    axes[0].grid(True, alpha=0.3)\n",
    "    \n",
    "    # HIGH REVENUE PLOT\n",
    "    if not high_results.empty:\n",
    "        for rate in high_results['Distribution_Rate'].unique():\n",
    "            subset = high_results[high_results['Distribution_Rate'] == rate]\n",
    "            axes[1].plot(subset['Initial_Equity']/1e6, subset['Combined_Value']/1e6, \n",
    "                        marker='o', label=f'{rate:.0%} Distribution', linewidth=2, markersize=6)\n",
    "    axes[1].set_xlabel('Initial Equity ($M)')\n",
    "    axes[1].set_ylabel('Combined Value: Profit + Recycled Assets ($M)')\n",
    "    axes[1].set_title('HIGH Revenue Scenario')\n",
    "    axes[1].legend()\n",
    "    axes[1].grid(True, alpha=0.3)\n",
    "    \n",
    "    # BLENDED REVENUE PLOT\n",
    "    if not blended_results.empty:\n",
    "        for rate in blended_results['Distribution_Rate'].unique():\n",
    "            subset = blended_results[blended_results['Distribution_Rate'] == rate]\n",
    "            axes[2].plot(subset['Initial_Equity']/1e6, subset['Combined_Value']/1e6, \n",
    "                        marker='o', label=f'{rate:.0%} Distribution', linewidth=2, markersize=6)\n",
    "    axes[2].set_xlabel('Initial Equity ($M)')\n",
    "    axes[2].set_ylabel('Combined Value: Profit + Recycled Assets ($M)')\n",
    "    axes[2].set_title('BLENDED Revenue Scenario')\n",
    "    axes[2].legend()\n",
    "    axes[2].grid(True, alpha=0.3)\n",
    "    \n",
    "    # VARIABLE EQUITY DRAW PLOT\n",
    "    if not variable_draw_results.empty:\n",
    "        for schedule in variable_draw_results['Schedule'].unique():\n",
    "            subset = variable_draw_results[variable_draw_results['Schedule'] == schedule]\n",
    "            for rate in subset['Distribution_Rate'].unique():\n",
    "                subsubset = subset[subset['Distribution_Rate'] == rate]\n",
    "                axes[3].scatter([subsubset['Initial_Equity'].iloc[0]/1e6], [subsubset['Combined_Value'].iloc[0]/1e6], \n",
    "                               marker='o', label=f'{schedule} @ {rate:.0%}', s=100)\n",
    "    axes[3].set_xlabel('Initial Equity ($M)')\n",
    "    axes[3].set_ylabel('Combined Value: Profit + Recycled Assets ($M)')\n",
    "    axes[3].set_title('LOW Revenue Variable Equity Draw')\n",
    "    axes[3].legend()\n",
    "    axes[3].grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # IRR PLOTS\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n",
    "    axes = axes.flatten()\n",
    "    \n",
    "    if not low_results.empty:\n",
    "        for rate in low_results['Distribution_Rate'].unique():\n",
    "            subset = low_results[low_results['Distribution_Rate'] == rate]\n",
    "            axes[0].plot(subset['Initial_Sites'], subset['IRR'], marker='o', label=f'{rate:.0%} Distribution')\n",
    "        axes[0].axhline(y=0, color='r', linestyle='--', label='IRR = 0%')\n",
    "        axes[0].set_xlabel('Initial Sites')\n",
    "        axes[0].set_ylabel('IRR')\n",
    "        axes[0].set_title('IRR vs Initial Sites (Low Revenue)')\n",
    "        axes[0].legend()\n",
    "        axes[0].grid(True, alpha=0.3)\n",
    "    \n",
    "    if not high_results.empty:\n",
    "        for rate in high_results['Distribution_Rate'].unique():\n",
    "            subset = high_results[high_results['Distribution_Rate'] == rate]\n",
    "            axes[1].plot(subset['Initial_Sites'], subset['IRR'], marker='o', label=f'{rate:.0%} Distribution')\n",
    "        axes[1].axhline(y=0, color='r', linestyle='--', label='IRR = 0%')\n",
    "        axes[1].set_xlabel('Initial Sites')\n",
    "        axes[1].set_ylabel('IRR')\n",
    "        axes[1].set_title('IRR vs Initial Sites (High Revenue)')\n",
    "        axes[1].legend()\n",
    "        axes[1].grid(True, alpha=0.3)\n",
    "    \n",
    "    if not blended_results.empty:\n",
    "        for rate in blended_results['Distribution_Rate'].unique():\n",
    "            subset = blended_results[blended_results['Distribution_Rate'] == rate]\n",
    "            axes[2].plot(subset['Initial_Sites'], subset['IRR'], marker='o', label=f'{rate:.0%} Distribution')\n",
    "        axes[2].axhline(y=0, color='r', linestyle='--', label='IRR = 0%')\n",
    "        axes[2].set_xlabel('Initial Sites')\n",
    "        axes[2].set_ylabel('IRR')\n",
    "        axes[2].set_title('IRR vs Initial Sites (Blended Revenue)')\n",
    "        axes[2].legend()\n",
    "        axes[2].grid(True, alpha=0.3)\n",
    "    \n",
    "    if not variable_draw_results.empty:\n",
    "        for schedule in variable_draw_results['Schedule'].unique():\n",
    "            subset = variable_draw_results[variable_draw_results['Schedule'] == schedule]\n",
    "            for rate in subset['Distribution_Rate'].unique():\n",
    "                subsubset = subset[subset['Distribution_Rate'] == rate]\n",
    "                axes[3].scatter([subsubset['Initial_Sites'].iloc[0]], [subsubset['IRR'].iloc[0]], \n",
    "                               marker='o', label=f'{schedule} @ {rate:.0%}', s=100)\n",
    "        axes[3].axhline(y=0, color='r', linestyle='--', label='IRR = 0%')\n",
    "        axes[3].set_xlabel('Initial Sites')\n",
    "        axes[3].set_ylabel('IRR')\n",
    "        axes[3].set_title('IRR vs Initial Sites (Low Revenue Variable Draw)')\n",
    "        axes[3].legend()\n",
    "        axes[3].grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # DEPLOYMENT TIMELINE\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n",
    "    fig.suptitle('DEPLOYMENT TIMELINE ANALYSIS - TOP SCENARIOS', fontsize=16)\n",
    "    axes = axes.flatten()\n",
    "    \n",
    "    if not low_results.empty:\n",
    "        top3_low = low_results.nlargest(3, 'Combined_Value')\n",
    "        if not top3_low.empty:\n",
    "            scenario = top3_low.iloc[0]\n",
    "            result = simulate_balanced_deployment(scenario['Initial_Sites'], scenario['Distribution_Rate'], avg_cash_low)\n",
    "            years = np.arange(1, analysis_years + 1)\n",
    "            cumulative_sites = [scenario['Initial_Sites']]\n",
    "            running_total = scenario['Initial_Sites']\n",
    "            for j in range(1, analysis_years):\n",
    "                running_total += result['sites_recycled'][j]\n",
    "                cumulative_sites.append(running_total)\n",
    "            axes[0].plot(years, cumulative_sites, marker='o', linewidth=3, label='Total Sites')\n",
    "            axes[0].bar(years, [scenario['Initial_Sites']] + [0]*(analysis_years-1), \n",
    "                        color='orange', alpha=0.7, label='Initial Equity', width=0.2)\n",
    "            axes[0].bar(years, result['sites_recycled'], \n",
    "                        bottom=[scenario['Initial_Sites']] + [0]*(analysis_years-1),\n",
    "                        color='green', alpha=0.7, label='Recycled Cash', width=0.2)\n",
    "            axes[0].set_title(f'LOW Rev: {scenario[\"Initial_Sites\"]} sites, {scenario[\"Distribution_Rate\"]:.0%} rate')\n",
    "            axes[0].set_xlabel('Year')\n",
    "            axes[0].set_ylabel('Sites')\n",
    "            axes[0].legend()\n",
    "            axes[0].grid(alpha=0.3)\n",
    "    \n",
    "    if not high_results.empty:\n",
    "        top3_high = high_results.nlargest(3, 'Combined_Value')\n",
    "        if not top3_high.empty:\n",
    "            scenario = top3_high.iloc[0]\n",
    "            result = simulate_balanced_deployment(scenario['Initial_Sites'], scenario['Distribution_Rate'], avg_cash_high)\n",
    "            years = np.arange(1, analysis_years + 1)\n",
    "            cumulative_sites = [scenario['Initial_Sites']]\n",
    "            running_total = scenario['Initial_Sites']\n",
    "            for j in range(1, analysis_years):\n",
    "                running_total += result['sites_recycled'][j]\n",
    "                cumulative_sites.append(running_total)\n",
    "            axes[1].plot(years, cumulative_sites, marker='o', linewidth=3, label='Total Sites')\n",
    "            axes[1].bar(years, [scenario['Initial_Sites']] + [0]*(analysis_years-1), \n",
    "                        color='orange', alpha=0.7, label='Initial Equity', width=0.2)\n",
    "            axes[1].bar(years, result['sites_recycled'], \n",
    "                        bottom=[scenario['Initial_Sites']] + [0]*(analysis_years-1),\n",
    "                        color='green', alpha=0.7, label='Recycled Cash', width=0.2)\n",
    "            axes[1].set_title(f'HIGH Rev: {scenario[\"Initial_Sites\"]} sites, {scenario[\"Distribution_Rate\"]:.0%} rate')\n",
    "            axes[1].set_xlabel('Year')\n",
    "            axes[1].set_ylabel('Sites')\n",
    "            axes[1].legend()\n",
    "            axes[1].grid(alpha=0.3)\n",
    "    \n",
    "    if not blended_results.empty:\n",
    "        top3_blended = blended_results.nlargest(3, 'Combined_Value')\n",
    "        if not top3_blended.empty:\n",
    "            scenario = top3_blended.iloc[0]\n",
    "            result = simulate_balanced_deployment(scenario['Initial_Sites'], scenario['Distribution_Rate'], avg_cash_blended)\n",
    "            years = np.arange(1, analysis_years + 1)\n",
    "            cumulative_sites = [scenario['Initial_Sites']]\n",
    "            running_total = scenario['Initial_Sites']\n",
    "            for j in range(1, analysis_years):\n",
    "                running_total += result['sites_recycled'][j]\n",
    "                cumulative_sites.append(running_total)\n",
    "            axes[2].plot(years, cumulative_sites, marker='o', linewidth=3, label='Total Sites')\n",
    "            axes[2].bar(years, [scenario['Initial_Sites']] + [0]*(analysis_years-1), \n",
    "                        color='orange', alpha=0.7, label='Initial Equity', width=0.2)\n",
    "            axes[2].bar(years, result['sites_recycled'], \n",
    "                        bottom=[scenario['Initial_Sites']] + [0]*(analysis_years-1),\n",
    "                        color='green', alpha=0.7, label='Recycled Cash', width=0.2)\n",
    "            axes[2].set_title(f'BLENDED Rev: {scenario[\"Initial_Sites\"]} sites, {scenario[\"Distribution_Rate\"]:.0%} rate')\n",
    "            axes[2].set_xlabel('Year')\n",
    "            axes[2].set_ylabel('Sites')\n",
    "            axes[2].legend()\n",
    "            axes[2].grid(alpha=0.3)\n",
    "    \n",
    "    if not variable_draw_results.empty:\n",
    "        top3_variable = variable_draw_results.nlargest(3, 'Combined_Value')\n",
    "        if not top3_variable.empty:\n",
    "            scenario = top3_variable.iloc[0]\n",
    "            draw_schedule = next(s['draws'] for s in variable_draw_schedules if s['name'] == scenario['Schedule'])\n",
    "            result = simulate_variable_equity_draw(draw_schedule, scenario['Distribution_Rate'], avg_cash_low)\n",
    "            years = np.arange(1, analysis_years + 1)\n",
    "            cumulative_sites = [draw_schedule[0]]\n",
    "            running_total = draw_schedule[0]\n",
    "            for j in range(1, analysis_years):\n",
    "                if j < len(draw_schedule):\n",
    "                    running_total += draw_schedule[j]\n",
    "                running_total += result['sites_recycled'][j]\n",
    "                cumulative_sites.append(running_total)\n",
    "            axes[3].plot(years, cumulative_sites, marker='o', linewidth=3, label='Total Sites')\n",
    "            axes[3].bar(years, draw_schedule[:min(len(draw_schedule), analysis_years)] + [0]*(analysis_years-len(draw_schedule)), \n",
    "                        color='orange', alpha=0.7, label='Initial Equity', width=0.2)\n",
    "            axes[3].bar(years, result['sites_recycled'], \n",
    "                        bottom=draw_schedule[:min(len(draw_schedule), analysis_years)] + [0]*(analysis_years-len(draw_schedule)),\n",
    "                        color='green', alpha=0.7, label='Recycled Cash', width=0.2)\n",
    "            axes[3].set_title(f'VARIABLE DRAW: {scenario[\"Schedule\"]}, {scenario[\"Distribution_Rate\"]:.0%} rate')\n",
    "            axes[3].set_xlabel('Year')\n",
    "            axes[3].set_ylabel('Sites')\n",
    "            axes[3].legend()\n",
    "            axes[3].grid(alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "try:\n",
    "    create_charts()\n",
    "    print(\"✅ Charts created successfully!\")\n",
    "except Exception as e:\n",
    "    print(f\"⚠️ Chart creation error: {e}\")\n",
    "    print(\"Analysis results are still available in tables above.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"💰 DETAILED CASH FLOW MODELS\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "def create_cash_flow_model(initial_sites, distribution_rate, avg_cash, scenario_name, draw_schedule=None):\n",
    "    print(f\"\\n📊 CASH FLOW MODEL: {scenario_name}\")\n",
    "    total_initial_sites = initial_sites if draw_schedule is None else sum(draw_schedule)\n",
    "    print(f\"Initial Sites: {total_initial_sites} | Distribution Rate: {distribution_rate:.0%} | Cash/Site: ${avg_cash:,.0f}\")\n",
    "    if draw_schedule:\n",
    "        print(f\"Schedule: {draw_schedule}\")\n",
    "    print(\"-\" * 120)\n",
    "    \n",
    "    if draw_schedule:\n",
    "        result = simulate_variable_equity_draw(draw_schedule, distribution_rate, avg_cash)\n",
    "    else:\n",
    "        result = simulate_balanced_deployment(initial_sites, distribution_rate, avg_cash)\n",
    "    \n",
    "    cash_flow_data = []\n",
    "    cumulative_sites = draw_schedule[0] if draw_schedule else initial_sites\n",
    "    cumulative_profit = 0\n",
    "    cumulative_invested = (draw_schedule[0] if draw_schedule else initial_sites) * equity_per_site\n",
    "    \n",
    "    for year in range(analysis_years):\n",
    "        if year == 0:\n",
    "            sites_added_equity = draw_schedule[0] if draw_schedule else initial_sites\n",
    "            cash_flow_data.append({\n",
    "                'Year': year,\n",
    "                'Sites_Start': 0,\n",
    "                'Sites_Added_Equity': sites_added_equity,\n",
    "                'Sites_Added_Recycled': 0,\n",
    "                'Sites_End': sites_added_equity,\n",
    "                'Operating_Cash_Flow': 0,\n",
    "                'Distributions': 0,\n",
    "                'Reinvestment': sites_added_equity * equity_per_site,\n",
    "                'Net_Cash_Flow': -sites_added_equity * equity_per_site,\n",
    "                'Cumulative_Cash_Flow': -sites_added_equity * equity_per_site,\n",
    "                'Retained_Cash': -sites_added_equity * equity_per_site\n",
    "            })\n",
    "        else:\n",
    "            sites_start = cumulative_sites\n",
    "            operating_cash = sites_start * avg_cash\n",
    "            retained_cash_before = result['retained_cash'][year-1] if year > 0 else -(draw_schedule[0] if draw_schedule else initial_sites) * equity_per_site\n",
    "            retained_cash_after_ops = retained_cash_before + operating_cash\n",
    "            distributions = result['profit_distributed'][year]\n",
    "            retained_after_dist = retained_cash_after_ops - distributions\n",
    "            new_sites_recycled = result['sites_recycled'][year]\n",
    "            reinvestment = new_sites_recycled * equity_per_site\n",
    "            sites_added_equity = draw_schedule[year] if draw_schedule and year < len(draw_schedule) else 0\n",
    "            if sites_added_equity > 0:\n",
    "                cumulative_sites += sites_added_equity\n",
    "                reinvestment += sites_added_equity * equity_per_site\n",
    "                cumulative_invested += sites_added_equity * equity_per_site\n",
    "            cumulative_sites += new_sites_recycled\n",
    "            cumulative_profit += distributions\n",
    "            cumulative_invested += new_sites_recycled * equity_per_site\n",
    "            net_cash_flow = distributions - reinvestment\n",
    "            cumulative_cash_flow = cumulative_profit - cumulative_invested\n",
    "            cash_flow_data.append({\n",
    "                'Year': year,\n",
    "                'Sites_Start': sites_start,\n",
    "                'Sites_Added_Equity': sites_added_equity,\n",
    "                'Sites_Added_Recycled': new_sites_recycled,\n",
    "                'Sites_End': cumulative_sites,\n",
    "                'Operating_Cash_Flow': operating_cash,\n",
    "                'Distributions': distributions,\n",
    "                'Reinvestment': reinvestment,\n",
    "                'Net_Cash_Flow': net_cash_flow,\n",
    "                'Cumulative_Cash_Flow': cumulative_cash_flow,\n",
    "                'Retained_Cash': result['retained_cash'][year]\n",
    "            })\n",
    "    \n",
    "    cf_df = pd.DataFrame(cash_flow_data)\n",
    "    display_years = list(range(0, min(16, analysis_years)))\n",
    "    cf_display = cf_df[cf_df['Year'].isin(display_years)].copy()\n",
    "    currency_cols = ['Operating_Cash_Flow', 'Distributions', 'Reinvestment', 'Net_Cash_Flow', \n",
    "                     'Cumulative_Cash_Flow', 'Retained_Cash']\n",
    "    for col in currency_cols:\n",
    "        cf_display[col] = cf_display[col].apply(lambda x: f\"${x/1e6:.1f}M\" if abs(x) >= 1e6 else f\"${x/1e3:.0f}K\")\n",
    "    print(\"\\nCASH FLOW MODEL (in millions):\")\n",
    "    display(cf_display)\n",
    "    total_operating_cash = sum([cf['Operating_Cash_Flow'] for cf in cash_flow_data[1:]])\n",
    "    total_distributions = sum(result['profit_distributed'])\n",
    "    total_reinvested = cumulative_invested\n",
    "    final_portfolio_value = cumulative_sites * equity_per_site\n",
    "    print(f\"\\n📈 SUMMARY METRICS:\")\n",
    "    print(f\"• Final Portfolio: {cumulative_sites:,.0f} sites worth ${final_portfolio_value/1e6:.1f}M\")\n",
    "    print(f\"• Total Distributions: ${total_distributions/1e6:.1f}M over {analysis_years} years\")\n",
    "    print(f\"• Total Invested: ${total_reinvested/1e6:.1f}M (initial + recycled)\")\n",
    "    print(f\"• Portfolio Growth: {((cumulative_sites/total_initial_sites)-1)*100:.0f}% increase in sites\")\n",
    "    print(f\"• Annual Distribution (Yr {analysis_years}): ${result['profit_distributed'][-1]/1e6:.1f}M\")\n",
    "    print(f\"• IRR: {result['irr']:.2%}\")\n",
    "    print(f\"• Cash-on-Cash Multiple: {total_distributions/(total_initial_sites * equity_per_site):.1f}x\")\n",
    "    return cf_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Generating detailed cash flow models for top scenarios...\")\n",
    "if not low_results.empty and not high_results.empty and not blended_results.empty and not variable_draw_results.empty:\n",
    "    best_low = low_results.loc[low_results['Combined_Value'].idxmax()]\n",
    "    best_high = high_results.loc[high_results['Combined_Value'].idxmax()]\n",
    "    best_blended = blended_results.loc[blended_results['Combined_Value'].idxmax()]\n",
    "    best_variable_draw = variable_draw_results.loc[variable_draw_results['Combined_Value'].idxmax()]\n",
    "    \n",
    "    cf_model_1 = create_cash_flow_model(\n",
    "        int(best_low['Initial_Sites']), best_low['Distribution_Rate'], avg_cash_low, \n",
    "        f\"BEST LOW REVENUE ({best_low['Initial_Sites']:.0f} sites @ {best_low['Distribution_Rate']:.0%})\"\n",
    "    )\n",
    "    cf_model_2 = create_cash_flow_model(\n",
    "        int(best_high['Initial_Sites']), best_high['Distribution_Rate'], avg_cash_high, \n",
    "        f\"BEST HIGH REVENUE ({best_high['Initial_Sites']:.0f} sites @ {best_high['Distribution_Rate']:.0%})\"\n",
    "    )\n",
    "    cf_model_3 = create_cash_flow_model(\n",
    "        int(best_blended['Initial_Sites']), best_blended['Distribution_Rate'], avg_cash_blended, \n",
    "        f\"BEST BLENDED REVENUE ({best_blended['Initial_Sites']:.0f} sites @ {best_blended['Distribution_Rate']:.0%})\"\n",
    "    )\n",
    "    cf_model_4 = create_cash_flow_model(\n",
    "        0, best_variable_draw['Distribution_Rate'], avg_cash_low, \n",
    "        f\"BEST VARIABLE DRAW LOW REVENUE ({best_variable_draw['Schedule']} @ {best_variable_draw['Distribution_Rate']:.0%})\",\n",
    "        draw_schedule=next(s['draws'] for s in variable_draw_schedules if s['name'] == best_variable_draw['Schedule'])\n",
    "    )\n",
    "    \n",
    "    moderate_scenarios = blended_results[(blended_results['Initial_Sites'] >= 24) & (blended_results['Initial_Sites'] <= 26)]\n",
    "    if not moderate_scenarios.empty:\n",
    "        recommended = moderate_scenarios.loc[moderate_scenarios['Combined_Value'].idxmax()]\n",
    "        cf_model_5 = create_cash_flow_model(\n",
    "            int(recommended['Initial_Sites']), recommended['Distribution_Rate'], avg_cash_blended, \n",
    "            f\"RECOMMENDED BLENDED REVENUE ({recommended['Initial_Sites']:.0f} sites @ {recommended['Distribution_Rate']:.0%})\"\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"💾 EXPORTING CASH FLOW MODELS\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "try:\n",
    "    if 'cf_model_1' in locals():\n",
    "        cf_model_1.to_csv('cash_flow_best_low_revenue.csv', index=False)\n",
    "        print(\"✅ Exported: cash_flow_best_low_revenue.csv\")\n",
    "    if 'cf_model_2' in locals():\n",
    "        cf_model_2.to_csv('cash_flow_best_high_revenue.csv', index=False)\n",
    "        print(\"✅ Exported: cash_flow_best_high_revenue.csv\")\n",
    "    if 'cf_model_3' in locals():\n",
    "        cf_model_3.to_csv('cash_flow_best_blended_revenue.csv', index=False)\n",
    "        print(\"✅ Exported: cash_flow_best_blended_revenue.csv\")\n",
    "    if 'cf_model_4' in locals():\n",
    "        cf_model_4.to_csv('cash_flow_best_variable_draw.csv', index=False)\n",
    "        print(\"✅ Exported: cash_flow_best_variable_draw.csv\")\n",
    "    if 'cf_model_5' in locals():\n",
    "        cf_model_5.to_csv('cash_flow_recommended_scenario.csv', index=False)\n",
    "        print(\"✅ Exported: cash_flow_recommended_scenario.csv\")\n",
    "    print(\"\\n💡 These CSV files contain complete cash flow models you can analyze in Excel\")\n",
    "except Exception as e:\n",
    "    print(f\"⚠️ Export error: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"🛠️ CUSTOM CASH FLOW MODEL GENERATOR\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "def generate_custom_cash_flow(initial_sites, distribution_rate, avg_cash_per_site, draw_schedule=None):\n",
    "    scenario_name = f\"CUSTOM: {sum(draw_schedule) if draw_schedule else initial_sites} sites @ {distribution_rate:.0%} dist, ${avg_cash_per_site:,.0f}/site\"\n",
    "    if draw_schedule:\n",
    "        scenario_name += f\", Schedule: {draw_schedule}\"\n",
    "    return create_cash_flow_model(initial_sites, distribution_rate, avg_cash_per_site, scenario_name, draw_schedule)\n",
    "\n",
    "print(\"🔧 To generate a custom cash flow model, use:\")\n",
    "print(\"generate_custom_cash_flow(initial_sites, distribution_rate, cash_per_site, draw_schedule=None)\")\n",
    "print(\"\\nExamples:\")\n",
    "print(\"1. Balanced: generate_custom_cash_flow(25, 0.05, 1305000)\")\n",
    "print(\"2. Variable Draw: generate_custom_cash_flow(0, 0.05, 580000, draw_schedule=[20, 40, 40])\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"🎯 EXECUTIVE SUMMARY\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "if not low_results.empty and not high_results.empty and not blended_results.empty and not variable_draw_results.empty:\n",
    "    top_low = low_results.nlargest(10, 'Combined_Value')\n",
    "    top_high = high_results.nlargest(10, 'Combined_Value')\n",
    "    top_blended = blended_results.nlargest(10, 'Combined_Value')\n",
    "    top_variable_draw = variable_draw_results.nlargest(10, 'Combined_Value')\n",
    "    \n",
    "    low_site_range = (int(top_low['Initial_Sites'].min()), int(top_low['Initial_Sites'].max()))\n",
    "    high_site_range = (int(top_high['Initial_Sites'].min()), int(top_high['Initial_Sites'].max()))\n",
    "    blended_site_range = (int(top_blended['Initial_Sites'].min()), int(top_blended['Initial_Sites'].max()))\n",
    "    optimal_site_range = (min(low_site_range[0], high_site_range[0], blended_site_range[0], 100), \n",
    "                          max(low_site_range[1], high_site_range[1], blended_site_range[1], 100))\n",
    "    \n",
    "    equity_range = (\n",
    "        optimal_site_range[0] * equity_per_site / 1e6,\n",
    "        optimal_site_range[1] * equity_per_site / 1e6\n",
    "    )\n",
    "    \n",
    "    low_dist_range = (top_low['Distribution_Rate'].min(), top_low['Distribution_Rate'].max())\n",
    "    high_dist_range = (top_high['Distribution_Rate'].min(), top_high['Distribution_Rate'].max())\n",
    "    blended_dist_range = (top_blended['Distribution_Rate'].min(), top_blended['Distribution_Rate'].max())\n",
    "    variable_draw_dist_range = (top_variable_draw['Distribution_Rate'].min(), top_variable_draw['Distribution_Rate'].max())\n",
    "    optimal_dist_range = (min(low_dist_range[0], high_dist_range[0], blended_dist_range[0], variable_draw_dist_range[0]), \n",
    "                          max(low_dist_range[1], high_dist_range[1], blended_dist_range[1], variable_draw_dist_range[1]))\n",
    "    \n",
    "    low_irr_range = (top_low['IRR'].min(), top_low['IRR'].max())\n",
    "    high_irr_range = (top_high['IRR'].min(), top_high['IRR'].max())\n",
    "    blended_irr_range = (top_blended['IRR'].min(), top_blended['IRR'].max())\n",
    "    variable_draw_irr_range = (top_variable_draw['IRR'].min(), top_variable_draw['IRR'].max())\n",
    "    \n",
    "    low_break_even_range = (\n",
    "        top_low['Break_Even_Year'].min() if top_low['Break_Even_Year'].notna().any() else 'N/A',\n",
    "        top_low['Break_Even_Year'].max() if top_low['Break_Even_Year'].notna().any() else 'N/A'\n",
    "    )\n",
    "    high_break_even_range = (\n",
    "        top_high['Break_Even_Year'].min() if top_high['Break_Even_Year'].notna().any() else 'N/A',\n",
    "        top_high['Break_Even_Year'].max() if top_high['Break_Even_Year'].notna().any() else 'N/A'\n",
    "    )\n",
    "    blended_break_even_range = (\n",
    "        top_blended['Break_Even_Year'].min() if top_blended['Break_Even_Year'].notna().any() else 'N/A',\n",
    "        top_blended['Break_Even_Year'].max() if top_blended['Break_Even_Year'].notna().any() else 'N/A'\n",
    "    )\n",
    "    variable_draw_break_even_range = (\n",
    "        top_variable_draw['Break_Even_Year'].min() if top_variable_draw['Break_Even_Year'].notna().any() else 'N/A',\n",
    "        top_variable_draw['Break_Even_Year'].max() if top_variable_draw['Break_Even_Year'].notna().any() else 'N/A'\n",
    "    )\n",
    "    \n",
    "    best_low = low_results.loc[low_results['Combined_Value'].idxmax()]\n",
    "    best_high = high_results.loc[high_results['Combined_Value'].idxmax()]\n",
    "    best_blended = blended_results.loc[blended_results['Combined_Value'].idxmax()]\n",
    "    best_variable_draw = variable_draw_results.loc[variable_draw_results['Combined_Value'].idxmax()]\n",
    "    \n",
    "    print(\"\\n📊 KEY FINDINGS:\")\n",
    "    print(f\"• OPTIMAL RANGE: {optimal_site_range[0]}-{optimal_site_range[1]} initial sites\")\n",
    "    print(f\"• RECOMMENDED EQUITY: ${equity_range[0]:.1f}M-${equity_range[1]:.1f}M\")\n",
    "    print(f\"• OPTIMAL DISTRIBUTION: {optimal_dist_range[0]:.0%}-{optimal_dist_range[1]:.0%}\")\n",
    "    print(f\"• EXPECTED IRR:\")\n",
    "    print(f\"  - High Revenue: {high_irr_range[0]:.1%}-{high_irr_range[1]:.1%}\")\n",
    "    print(f\"  - Blended Revenue: {blended_irr_range[0]:.1%}-{blended_irr_range[1]:.1%}\")\n",
    "    print(f\"  - Low Revenue: {low_irr_range[0]:.1%}-{low_irr_range[1]:.1%}\")\n",
    "    print(f\"  - Low Revenue Variable Draw: {variable_draw_irr_range[0]:.1%}-{variable_draw_irr_range[1]:.1%}\")\n",
    "    print(f\"• BREAK-EVEN:\")\n",
    "    print(f\"  - High Revenue: Years {high_break_even_range[0]}-{high_break_even_range[1]}\")\n",
    "    print(f\"  - Blended Revenue: Years {blended_break_even_range[0]}-{blended_break_even_range[1]}\")\n",
    "    print(f\"  - Low Revenue: Years {low_break_even_range[0]}-{low_break_even_range[1]}\")\n",
    "    print(f\"  - Low Revenue Variable Draw: Years {variable_draw_break_even_range[0]}-{variable_draw_break_even_range[1]}\")\n",
    "    \n",
    "    print(\"\\n🏆 BEST SCENARIOS:\")\n",
    "    print(f\"• LOW Revenue: {best_low['Initial_Sites']:.0f} sites → ${best_low['Combined_Value']/1e6:.1f}M ({best_low['Value_Multiple']:.1f}x)\")\n",
    "    print(f\"• HIGH Revenue: {best_high['Initial_Sites']:.0f} sites → ${best_high['Combined_Value']/1e6:.1f}M ({best_high['Value_Multiple']:.1f}x)\")\n",
    "    print(f\"• BLENDED Revenue: {best_blended['Initial_Sites']:.0f} sites → ${best_blended['Combined_Value']/1e6:.1f}M ({best_blended['Value_Multiple']:.1f}x)\")\n",
    "    print(f\"• LOW Revenue Variable Draw: 100 sites ({best_variable_draw['Schedule']}) → ${best_variable_draw['Combined_Value']/1e6:.1f}M ({best_variable_draw['Value_Multiple']:.1f}x)\")\n",
    "    \n",
    "    moderate_scenarios = blended_results[(blended_results['Initial_Sites'] >= 24) & (blended_results['Initial_Sites'] <= 26)]\n",
    "    if not moderate_scenarios.empty:\n",
    "        recommended = moderate_scenarios.loc[moderate_scenarios['Combined_Value'].idxmax()]\n",
    "        print(\"\\n💡 RECOMMENDED ACTION (BLENDED REVENUE):\")\n",
    "        print(f\"START WITH: {recommended['Initial_Sites']:.0f} sites (${recommended['Initial_Equity']/1e6:.1f}M) at {recommended['Distribution_Rate']:.0%} distribution rate\")\n",
    "        print(f\"This achieves ${recommended['Combined_Value']/1e6:.1f}M combined value ({recommended['Value_Multiple']:.1f}x) with {recommended['IRR']:.1%} IRR and break-even in Year {recommended['Break_Even_Year'] or 'N/A'}.\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"🎉 ANALYSIS COMPLETE!\")\n",
    "print(\"=\"*80)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\nTesting recommended scenarios:\")\n",
    "print(\"\\n1. Blended Revenue Scenario:\")\n",
    "generate_custom_cash_flow(25, 0.05, 1305000)\n",
    "print(\"\\n2. Low Revenue Variable Draw (20/40/40):\")\n",
    "generate_custom_cash_flow(0, 0.05, 580000, draw_schedule=[20, 40, 40])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
